 

<svg  id="svg"  xmlns="http://www.w3.org/2000/svg" width="100%" height="500" (click)="appendToContainer($event)" style="background: aquamarine">
 
  <circle *ngFor="let i of Aseats" [id]='i.id' r="7" [attr.cy]='i.cy' [attr.cx] = 'i.cx'></circle>  

<path id="path" class="st0"  fill="none"d="M12 55 L100 400" style="stroke: blue" />

</svg>
<input type="text" [(ngModel)]="scale">
<button mat-button (click)="CurvePathPlus()" style="background: rgb(9, 97, 97)">+</button>
<button mat-button (click)="CurvePathMinus()" style="background: rgb(9, 97, 97)">-</button>
<button mat-button (click)="spaceI()" style="background: rgb(9, 97, 97)">seatSpace+/button>
  <button mat-button (click)="spaceD()" style="background: rgb(9, 97, 97)">seatSpace-</button>

<button mat-button (click)="drawSeats()" style="background: rgb(9, 97, 97)">DrawSeats</button>
<!-- <button mat-button (click)="selectSeats()" style="background: rgb(9, 97, 97)">selectSeats</button>
<button mat-button (click)="curveseats()" style="color:red" >Curve</button>
<button mat-button (click)="selectSeat()" style="background: rgb(9, 97, 97)">SelectSingleSeat</button>
<button mat-button (click)="selectMultipleSeat()" style="background:antiquewhite">SelectSMultipleSeat</button>
<button mat-button (click)="deleteMultipleSeat()" style="color:red" >Delete</button> -->
<!-- <canvas  id="canvas" width="1000" height="625" style="display: block; width: 714px; height: 625.818px; touch-action: auto; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color:rgb(197, 204, 204)"  (click)="selectseat($event)" (mousemove)="previewSelection($event)" (mousedown)="selectseat($event)" (mouseup)="fillseat($event)" style="background: rgb(197, 204, 204)" ></canvas>  -->
<!-- <input type="text" [(ngModel)]="pos" (keyup)="draw()"> -->
/////////////////////////////////////////////////////




    
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'my-app';
  cx:number;
  cy:number;
  x0:any; x2:any; y2:any; x3:any; y3:any;x4:any; y4:any; x5:any;y5:any; x6:any; y6:any; classname:string; y0:any;
  count:number=0;
  gradient:number;
  r:number;
  distance:any;
 circles=[];
 seats:number;
 positionx:any;
 fill:string;
 positiony:any;
 selectSingle:boolean=false;
 deleteMultiple:boolean=false;
 selectMultiple:boolean=false;
 id:any=1;
 value:any=1;
 k:any=1;
 positionx2: number;
 positiony2: number;
 Aseats = [];
 preview:boolean=false;
 removeSeats=[];
 rectangles=[];
 pos:any;
currentPosition: { x: number, y: number } = {
                  x: 0,
                  y: 0  
                  }
  hovercol: string;
  positionMove: number;
  positionMovey: number;
  nodes: any[];
  width: number;
  height: number;
  numnodes: number;
  angle: number;
  x: number;
  y: number;
  rad: any;
  centerx: any;
  centery: any;
  radius: any;
  wid: any;
  height1:any;
  x7:any;
  y7:any;
  target:any;
  draw:boolean=false;
  rectId: any=0;
  x8: any;
  y8: any;
  curveSeats=[];
  arc=[];
  className: any;
  group: any;
  start: string;
  d: string;
  end: string;
  startX: any;
  startY: any;
  midX: number;
  midY: number;
  intersections: number;
  space:number=12;
  m: number;
 
  ngOnInit() {
    






  }
   addCircleToSVG(x, y){
    var  svg = document.getElementById("svg");
    const circle = document.createElementNS("http://www.w3.org/2000/svg",'circle');
    circle.setAttribute("cx", x);
    circle.setAttribute("cy", y);
    circle.setAttribute("r", "5");
    circle.setAttribute("fill", "#8888ff");
    svg.appendChild(circle);
    this.curveSeats.push(circle);
  }
  appendToContainer(e)
  {
    if((this.count)%2==0)
    {
        this.start="M"+e.clientX+" "+e.clientY+" ";  
        this.startX=e.clientX;
        this.startY=e.clientY; 
    }
    else{
      this.end=e.clientX+" "+e.clientY;
      // this.d=this.start+"S"+" "+this.midX+" "+this.midY+" "+this.end;
        this.d=this.start+"L"+this.end;
        this.m=(e.clientY-this.startY)/(e.clientX-this.startX);
        this.gradient=1/this.m;
        // this.d=this.start+"Q"+" "+this.midX+" "+this.midY+" "+this.end;
        this.midX=(this.startX+e.clientX)/2;
        this.midY=(this.startY+e.clientY)/2;
        this.DRAWLine(this.d);
       this.DrawCircles();
    }
    this.count++;
  }
 DRAWLine(d)
 {
  var  path = document.querySelector("path");
  path.setAttribute('d',d);
 }
 DrawCircles()
 {
  var  path = document.querySelector("path");
   // The first important function getTotalLength
  let totalLength = path.getTotalLength();
  this.intersections =Math.floor((totalLength)/12);
 for(var i = 0; i <= this.intersections; i ++){
  let distance =Math.trunc( i * 1/this.intersections * totalLength);
  // The second important function getPointAtLength;
  var point = path.getPointAtLength(distance);
  this.addCircleToSVG(point.x, point.y);
}
 }
 CurvePathPlus()
 {
  var  path = document.querySelector("path");
  this.midY=this.midY+5;
  this.midX=this.midX+Math.sqrt(Math.pow(5,2)/(1+Math.pow(this.gradient,2)));
  
  this.d=this.start+"S"+" "+this.midX+" "+this.midY+" "+this.end;
  // path.setAttribute('d',this.d) ;
  // this.DRAWLine(this.d);
  var  path = document.querySelector("path");
   // The first important function getTotalLength
  let totalLength = path.getTotalLength();
  this.space=Math.floor((totalLength-10*this.curveSeats.length)/this.curveSeats.length)+11;
  this.intersections =Math.floor((totalLength)/this.space);
  var i=0;
  path.setAttribute('d',this.d);
 this.curveSeats.forEach(cir => {
  let distance =Math.trunc( i * 1/this.intersections * totalLength);
  // The second important function getPointAtLength;
  var point = path.getPointAtLength(distance);
  // console.log(i);
  // console.log(this.curveSeats.length);
  if(i!=0  && (i!==(this.curveSeats.length-1)))
  {
    cir.setAttribute("cx",point.x);
    cir.setAttribute("cy",point.y);
   
  }
  else{
    console.log(i);
  }
  i++;
   
 });
 }
 CurvePathMinus()
 {
  var  path = document.querySelector("path");
  this.midY=this.midY-5;
  this.midX=this.midX-Math.sqrt(Math.pow(5,2)/(1+Math.pow(this.gradient,2)));
  
  this.d=this.start+"S"+" "+this.midX+" "+this.midY+" "+this.end;
  // path.setAttribute('d',this.d) ;
  // this.DRAWLine(this.d);
  var  path = document.querySelector("path");
   // The first important function getTotalLength
  let totalLength = path.getTotalLength();
  this.space=Math.floor((totalLength-10*this.curveSeats.length)/this.curveSeats.length)+11;
  this.intersections =Math.floor((totalLength)/this.space);
  var i=0;
  path.setAttribute('d',this.d);
 this.curveSeats.forEach(cir => {
  let distance =Math.trunc( i * 1/this.intersections * totalLength);
  // The second important function getPointAtLength;
  var point = path.getPointAtLength(distance);
  // console.log(i);
  // console.log(this.curveSeats.length);
  if(i!=0  && (i!==(this.curveSeats.length-1)))
  {
    cir.setAttribute("cx",point.x);
    cir.setAttribute("cy",point.y);
   
  }
  else{
    console.log(i);
  }
  i++;
   
 });
 }
 spaceI()
 {
   
 }
}
