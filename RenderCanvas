import { Component, OnInit } from '@angular/core';
import { element, setClassMetadata } from '@angular/core/src/render3';
import { empty } from 'rxjs';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'my-app';
  svg;
  path:string;
  num:any=1;
  cx:number;cy:number;x0:any;x2:any;y2:any;x3:any;y3:any;x4:any;y4:any;x5:any;y5:any;x6:any;y6:any;classname:string;y0:any;
  count:number=0;
  gradient:number;
 r:number;
 distance:any;
 tanpowVal:number;
 sinVal:number;
 cosVal:number;
 seats:number;
 circles=[];
 range:number;
 id:any=1;
 k:any=1;
 Aseats = [];

  currentPosition: { x: number, y: number } = {
    x: 0,
    y: 0  
  }
  ngOnInit() {
    const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');

const hitCanvas = document.createElement('canvas');
const hitCtx = hitCanvas.getContext('2d');

const colorsHash = {};

function getRandomColor() {
 const r = Math.round(Math.random() * 255);
 const g = Math.round(Math.random() * 255);
 const b = Math.round(Math.random() * 255);
 return `rgb(${r},${g},${b})`;
}


var Circle = function(x, y, radius,id) {
  this.x      = x;
  this.y      = y;
  this.radius = radius;
  this.id=id;
  
}
var circle    = new Circle(40, 40, 10,this.id);
this.id++;
var cir2    = new Circle(100, 70, 10,this.id);
this.circles.push(circle);
this.circles.push(cir2);

this.circles.forEach(circle => {
  canvas.addEventListener('mousemove', function(e){

    // Get canvas position on page
    var canvasBounds = canvas.getBoundingClientRect();
  
    // Turn click coordinates into canvas coordinates 1
    // localX and localY renamed from clickX and clickY
    // in the video (which were bad names!)
    var localX = e.pageX - canvasBounds.left;
    var localY = e.pageY - canvasBounds.top;
  
    // Test circle for hit
    if (circle.isHitBy(localX, localY)){
      console.log('Circle hit');
    }
  
  });
});

Circle.prototype.isHitBy = function(x, y) {

  // Get distance of passed x,y from circle midpoint
  var distance = Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2));

  // If distance is less than radius, point is in circle
  return (distance <= this.radius);
}




this.circles.forEach(circle => {
  ctx.beginPath();
  ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI, false);
  ctx.fillStyle = 'red';
  ctx.fill();
  
  hitCtx.beginPath();
  hitCtx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI, false);
  hitCtx.fillStyle ='red';
  hitCtx.fill();
});


   
  }
    
  
  
}
