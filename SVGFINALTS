import { Component, OnInit } from '@angular/core';
import * as _ from 'lodash'

import * as d3 from 'd3';
import { log } from 'util';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'my-app';
  cx:number;
  cy:number;
  x0:any; x2:any; y2:any; x3:any; y3:any;x4:any; y4:any; x5:any;y5:any; x6:any; y6:any; classname:string; y0:any;
  count:number=0;
  gradient:number;
  r:number;
  distance:any;
 circles=[];
 seats:number;
 positionx:any;
 fill:string;
 positiony:any;
 selectSingle:boolean=false;
 deleteMultiple:boolean=false;
 selectMultiple:boolean=false;
 id:any=1;
 value:any=1;
 k:any=1;
 positionx2: number;
 positiony2: number;
 Aseats = [];
 preview:boolean=false;
 removeSeats=[];
currentPosition: { x: number, y: number } = {
                  x: 0,
                  y: 0  
                  }
  hovercol: string;
  positionMove: number;
  positionMovey: number;
  ismouseDown:boolean=false;
  startX: any;
  startY: any;
  mouseX: any;
  mouseY: any;
  startX2:any;
          startY2:any;
          endx2:any;
          endy2:any;
  height: number;
  width: number;
  stroke: string;
  fill3: string;
  drawSeat:boolean=false;
  dragElements:boolean=false;
  elements=[];
  currentX: any;
  currentY: any;
  dx: any;
  dy: any;
  dargArray=[];
  selectCircle:boolean=false;
  radius: number;
  cx1: number;
  cy1: number;
  distancecir: number;
  drawCustom:boolean=false;
  points="";
  position2="";
  points3=""; 
  polygonM=[];
  polygonC=[];
  length: any;
  textid:any=1;
  letters:boolean=false;
  textNode: SVGGraphicsElement;
  textNode2:SVGGraphicsElement
  caption;
  size: string;
  color2:any;
  centerx: any;
  centery: any;
  transform: string;
  degree: any=0;
  rotateText: boolean;
  moveTExt: boolean;
  scale: string;
  scaledeg: number=1;
  ngOnInit() {
    
    this.circles=[];
    // let mapWidth = parseFloat( d3.select('#map').style('width') );
    // let mapHeight = parseFloat( d3.select('#map').style('height') );
    // let factor = mapWidth / parseFloat(d3.select('#map svg').attr('viewBox').split(' ')[2]);
    
    // let minimapRect = minimap.append('rect')
    //   .attr('id', 'minimapRect')
    //   .attr('width', mapWidth / factor )
    //   .attr('height', mapHeight / factor )
  }               
    mouseMove(e){
      //draw seats
      if(this.drawSeat==true)
      {
        this.classname="invisible";
        this.x6=this.x5;
        this.y6=this.y5;
        var x = e.clientX;
        var y = e.clientY;
        this.x2=x;
        this.y2=y;
        if((this.count)%2!=0)
           {
              this.distance=Math.sqrt(Math.pow((this.x2-this.x6),2)+Math.pow((this.y2-this.y6),2));
              this.seats=Math.round(this.distance/16);
              var r=7;
              this.gradient=(this.y2-this.y6)/(this.x2-this.x6);
              this.Aseats=[];
             for(var i=0;i<this.seats;i++) {
                                          if(this.x0<this.x2)
                                            {
                                              this.x3=this.x6+Math.sqrt(Math.pow(16,2)/(1+Math.pow(this.gradient,2)));
                                            }
                                            else{
                                                this.x3=this.x6-Math.sqrt(Math.pow(16,2)/(1+Math.pow(this.gradient,2)));
                                                }
                                            this.y3=this.gradient*(this.x3-this.x6)+this.y6;
                                            this.x4=(this.x6+this.x3)/2;
                                            this.y4=(this.y6+this.y3)/2;
                                            let c = {
                                                    id:i,
                                                  cx: this.x4,
                                                  cy: this.y4
                                                  }

                                            this.Aseats.push(c);

                                            this.x6=this.x3;
                                            this.y6=this.y3;
                
                                          }
   
 
  
            }
          }




        e.preventDefault();
        e.stopPropagation();
        x=e.clientX;
        this.mouseY=e.clientY;

      //drag and drop of selected  seats
        if(this.dragElements==true && this.ismouseDown==true)
        {
          
          this.elements.forEach(cir => {
            var cir1=document.getElementById(cir.id);
             this.dx = cir.x + e.clientX - this.currentX;
                      this.dy = cir.y + e.clientY - this.currentY;
                      cir1.setAttribute("cx",this.dx);
                      cir1.setAttribute("cy",this.dy);
                      this.dargArray.push({'circle':cir, 'dx':this.dx, 'dy':this.dy});
                      
                      
           
          });
          
        }
       //select the seats by drawing rectangle

        if(this.ismouseDown==true && this.selectMultiple==true)
        {
          this.startX2=Math.min(this.startX,e.clientX);
          this.startY2=Math.min(this.startY,e.clientY);
          this.width=Math.abs(e.clientX-this.startX);
          this.height=Math.abs(e.clientY-this.startY);
          this.circles.forEach(circle => {
             if((circle.x>=this.startX2 && circle.x<=(this.startX2+this.width))&& (circle.y>=this.startY2 && circle.y<=(this.startY2+this.height)))
            {
              
              var cir1=document.getElementById(circle.id);
              cir1.setAttribute('fill','red');
              
            }
            
            else{
              var cir1=document.getElementById(circle.id);
              
              cir1.setAttribute('fill','blue');
            }
            
          });
        }

        //selecr rows by drawing circle
        if(this.ismouseDown==true && this.selectCircle==true)
        {
          this.cx1=Math.min(this.startX,e.clientX);
          this.cy1=Math.min(this.startY,e.clientY);
          this.radius=Math.abs(e.clientX-this.startX);

          

          this.circles.forEach(circle => {

            this.distancecir=Math.sqrt(Math.pow(this.cx1-circle.x,2)+Math.pow(this.cy1-circle.y,2));
            console.log(circle.x,circle.y);


            if(this.distancecir<=this.radius)
            
            {
              
              var cir1=document.getElementById(circle.id);
              cir1.setAttribute('fill','red');
              // this.elements.push(circle);
            }
            
            else{
              var cir1=document.getElementById(circle.id);
              
              cir1.setAttribute('fill','blue');
            }
            
          });
        }
//rotate the selected text
       if(this.ismouseDown==true&& this.rotateText==true)
       {
       
       
        console.log(bb);
       
        
        const Ax = e.clientX - this.centerx;
        const Ay = e.clientY - this.centery;
        const d = Math.atan2(Ay, Ax);
  
        this.degree = (d  *(180 / Math.PI)  -1) + 90;
        console.log(this.degree);

        var bb = this.textNode.getBBox();
        this.centerx=bb.x + bb.width / 2;
        this.centery=bb.y + bb.height / 2;
        this.transform="rotate"+""+"("+""+this.degree+","+this.centerx+","+this.centery+""+")";
        this.textNode.setAttribute("transform", this.transform);
        var rect2=document.getElementById("selecttext");
        var bb = this.textNode.getBBox();
        rect2.setAttribute('x',bb.x);
        rect2.setAttribute('y',bb.y);
        rect2.setAttribute('width',bb.width);
        rect2.setAttribute('height',bb.height);
        rect2.setAttribute('fill',"transparent");
        rect2.setAttribute('stroke',"blue");
        rect2.setAttribute("transform", this.transform);
       }
      //  if(this.ismouseDown==true && this.moveTExt==true)
      //  {
        
       
        
      //   const Ax = e.clientX-this.startX+this.textNode.getAttribute(x);
      //   const Ay = e.e.clientY-this.startY - this.centery+this.textNode.getAttribute(y);  
      //   var bb = this.textNode.getBBox();
      //   this.centerx=bb.x + bb.width / 2;
      //   this.centery=bb.y + bb.height / 2;
      //   console
      //   this.textNode.setAttribute('x',Ax);
      //   this.textNode.setAttribute('y',Ay);
       
      //   var rect2=document.getElementById("selecttext");
      //   var bb = this.textNode.getBBox();
      //   rect2.setAttribute('x',bb.x);
      //   rect2.setAttribute('y',bb.y);
      //   rect2.setAttribungte('width',bb.width);
      //   rect2.setAttribute('height',bb.height);
      //   rect2.setAttribute('fill',"transparent");
      //   rect2.setAttribute('stroke',"blue");
      //   rect2.setAttribute("x", this.transform);

      //  }
    
            }

//check the seats are inside the polygon or not

            isPointInPoly(poly, pt) { 
              for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i) 
                ((poly[i][1] <= pt.y && pt.y < poly[j][1]) || (poly[j][1] <= pt.y && pt.y < poly[i][1])) && (pt.x < (poly[j][0] - poly[i][0]) * (pt.y - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0]) && (c = !c); 
                return c;
            }
            
           
              
  onclick(e) {
    {
      if(this.drawSeat==true)
      {

      
      if((this.count)%2==0 )
      {
          this.classname="visible";
            var x = e.clientX;
            var y = e.clientY;
            this.x0=x;
            this.y0=y; 
            this.x5=x;
            this.y5=y;
      }
      else{
            this.classname="invisible";
            this.fill="red"
            var x1 = e.clientX;
            var y1 = e.clientY;
            var r=7;
            this.distance=Math.sqrt(Math.pow((x1-this.x0),2)+Math.pow((y1-this.y0),2));
            this.seats=Math.round(this.distance/16);
            this.gradient=(y1-this.y0)/(x1-this.x0);
            for(var i=0;i<this.seats;i++) {
            if(this.x0<x1)
            {
              this.x3=this.x0+Math.sqrt(Math.pow(16,2)/(1+Math.pow(this.gradient,2)));
            }
            else
            {
              this.x3=this.x0-Math.sqrt(Math.pow(16,2)/(1+Math.pow(this.gradient,2)));
                }
            this.y3=this.gradient*(this.x3-this.x0)+this.y0;
            const cir1 = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            this.x4=(this.x0+this.x3)/2;
            this.y4=(this.y0+this.y3)/2;
            cir1.setAttribute("cx", this.x4); 
            cir1.setAttribute("cy",this.y4);
            cir1.setAttribute("r", '7');
            cir1.setAttribute('id',this.value)
            cir1.setAttribute('fill',"blue")
            document .getElementById ('group'). appendChild ( cir1 );
            var Circle = function(x, y, radius,id,fillStyle) {
                this.x      = x;
                this.y      = y;
                this.radius = radius;
                this.id=id;
                this.fill=fillStyle;                                                   }
            var circle    = new Circle(this.x4, this.y4, 7,this.value,this.fill);
            this.value++;
            this.x0=this.x3;
            this.y0=this.y3;
            this.circles.push(circle); 
                                     } 
          
       } 
      }
       
//select seats by drawing custom shapes
       if(this.drawCustom==true)
       {
         this.points="";
         this.polygonM.push([e.clientX,e.clientY]);
        this.polygonM.forEach(points => {
          this.points=this.points+points[0]+","+points[1]+" ";
          
        });
        console.log(this.polygonM);
         
         
         
        
         this.circles.forEach(cir => {
           this.polygonC=[];
           this.polygonC.push({'x':cir.x,'y':cir.y});
           if((this.isPointInPoly(this.polygonM,{'x':cir.x,'y':cir.y}))==true)
           {
             var cir1=document.getElementById(cir.id);
             
             cir1.setAttribute('fill','red');
             this.elements.push(cir);
           }
           else{
             var cir1=document.getElementById(cir.id);
             
             cir1.setAttribute('fill','blue');
           }
         });
          console.log(this.polygonM);
           // console.log(this.isPointInPoly([[1, 1], [5, 1], [5, 5], [1, 5]], {x:.x, y: 100})); //false
       }
       if(this.letters==true)
       {
        var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x',e.clientX);
        text.setAttribute('y',e.clientY);
        text.setAttribute('id',this.textid+"T");
        text.setAttribute('fontsize','12');
        
        console.log(e.clientX);
        console.log(e.clientY);
        
        text.setAttribute('fill',"red");
        text.textContent = 'text';
        text.style.fontWeight = 'normal';
        text.style.fontStyle = 'normal';
        text.style.color = 'black';
        text.style.fontSize='12';
       
        document .getElementById ('svg'). appendChild (text);
        this.letters=false;
        this.textid++;

       
       }


       //select the text
    var t1=e.target.id;
    console.log(t1);
    if(t1!=="svg" && t1!== "zoom_area" && t1!== "circleZoom" && t1!== "customZoom")
    {
      this.textNode = document.getElementById(t1);
      var bb = this.textNode.getBBox();
      console.log(bb);
      
      var rect2=document.getElementById("selecttext");
      rect2.setAttribute('x',bb.x);
      rect2.setAttribute('y',bb.y);
      this.centerx=bb.x + bb.width / 2;
        this.centery=bb.y + bb.height / 2;
        this.transform="rotate"+""+"("+""+0+","+this.centerx+","+this.centery+""+")";
      rect2.setAttribute('width',bb.width);
      rect2.setAttribute('height',bb.height);
      rect2.setAttribute('transform',this.transform);
      rect2.setAttribute('fill',"transparent");
      rect2.setAttribute('stroke',"blue");
      
    }
    

    // var width=500, height=500;

    // var widthTransform = width / bb.width;
    // var heightTransform = height / bb.height;
    // var value = widthTransform < heightTransform ? widthTransform : heightTransform;
    // // textNode.setAttribute("transform", "matrix("+value+", 0, 0, "+value+", 0,0)");
   
      
    
  this.count=this.count+1;
    }
}
startDrag(e)
{
  
   
  this.startX=  e.clientX ;
  this.startY= e.clientY ;
  this.ismouseDown=true;
  var rec=document.getElementById("zoom_area");
  var cir=document.getElementById("circleZoom");
  this.stroke="blue";
  this.fill3="transparent";
  if(this.selectMultiple==true)
  {
    this.elements=[];
  rec.setAttribute('stroke',this.stroke);
  rec.setAttribute('fill',this.fill3);
  rec.setAttribute('class',"visible");
  }
  if(this.selectCircle==true)
  {
    cir.setAttribute('stroke',this.stroke);
    cir.setAttribute('fill',this.fill3);
    cir.setAttribute('class',"visible");
  }
  this.currentX = e.clientX;
  this.currentY = e.clientY;
  // console.log(this.drawCustom);
//   if(this.drawCustom==true)
//   {
//     this.position2=this.position2+" "+this.currentX +","+this.currentY;
//     this.points=this.position2;
//     if(this.polygonM.length==0)
//     {
//       this.polygonM.push([this.currentX,this.currentY]);
//     }
    
//  this.length=this.polygonM.length;
   
//   }
  
  

}
endDrag(e)
{
  
  if(this.selectMultiple==true)
  {
    this.elements=[];    
    this.startX2=Math.min(this.startX,e.clientX);
          this.startY2=Math.min(this.startY,e.clientY);
          this.width=Math.abs(e.clientX-this.startX);
          this.height=Math.abs(e.clientY-this.startY);

          // console.log(this.startX,this.startY)

          this.circles.forEach(circle => {

            


            if((circle.x>=this.startX2 && circle.x<=(this.startX2+this.width))&& (circle.y>=this.startY2 && circle.y<=(this.startY2+this.height)))
            
            {
              this.elements.push(circle);
              // console.log(circle);
            }
    
  });}


  if(this.selectCircle==true)
  {
    this.elements=[];    
    this.cx1=Math.min(this.startX,e.clientX);
          this.cy1=Math.min(this.startY,e.clientY);
          this.radius=Math.abs(e.clientX-this.startX);

          this.circles.forEach(circle => {

            

            this.distancecir=Math.sqrt(Math.pow(this.cx1-circle.x,2)+Math.pow(this.cy1-circle.y,2));
            // console.log(circle.x,circle.y);


            if(this.distancecir<=this.radius)
            {
              this.elements.push(circle);
              // console.log(circle);
            }
    
  });}

  if(this.dragElements==true)
  {

    this.dargArray.forEach(cir => {
      cir.circle.x=cir.dx;
      // console.log(cir)
      cir.circle.y=cir.dy;
    });
  }
  if(this.drawCustom==true)

{
//  console.log(this.polygonM);
}  // console.log(this.circles);
  this.ismouseDown=false;
  this.rotateText=false;
  this.drawSeat=false;
  this.stroke="transparent";
  var rec=document.getElementById("zoom_area");
  var cir=document.getElementById("circleZoom");
  
  rec.setAttribute('stroke',this.stroke);
  cir.setAttribute('stroke',this.stroke);
  // this.dragElements=false;
  // console.log(this.elements);
  
 
  
}
select()
{
  this.points="";
  this.selectMultiple=true;
  this.drawSeat=false;
  this.elements=[];
  this.dragElements=false;
  this.selectCircle=false;
  this.drawCustom=false;
}
selectCir()
{
  this.points="";
  this.selectCircle=true;
  this.dragElements=false;
  this.elements=[];
  this.selectMultiple=false;
  this.drawSeat=false;
  this.drawCustom=false;
}
draw()
{
  this.points="";
  this.drawSeat=true;
  this.dragElements=false;
  this.selectMultiple=false;
  this.selectCircle=false;
  this.drawCustom=false;
}

drag()
{
  this.points="";
  this.dragElements=true;
  this.selectMultiple=false;
  this.drawSeat=false;
  this.selectCircle=false;
  this.drawCustom=false;
  
}
polygon()
{
  this.dragElements=false;
  this.selectMultiple=false;
  this.drawSeat=false;
  this.selectCircle=false;
  this.drawCustom=true;
}
text()
{
  this.dragElements=false;
  this.selectMultiple=false;
  this.drawSeat=false;
  this.selectCircle=false;
  this.drawCustom=false;
  this.letters=true;
}
onKey(e)
{
  this.textNode.textContent=this.caption;
  console.log(this.caption);
  
      var bb = this.textNode.getBBox();
      console.log(bb);
      
      var rect2=document.getElementById("selecttext");
      rect2.setAttribute('x',bb.x);
      rect2.setAttribute('y',bb.y);
      rect2.setAttribute('width',bb.width);
      rect2.setAttribute('height',bb.height);
      rect2.setAttribute('fill',"transparent");
      rect2.setAttribute('stroke',"blue");
}
font(e)
{
  this.textNode.style.fontSize=this.size;
  console.log(this.caption);
  
      var bb = this.textNode.getBBox();
      console.log(bb);
      
      var rect2=document.getElementById("selecttext");
      rect2.setAttribute('x',bb.x);
      rect2.setAttribute('y',bb.y);
      rect2.setAttribute('width',bb.width);
      rect2.setAttribute('height',bb.height);
      rect2.setAttribute('fill',"transparent");
      rect2.setAttribute('stroke',"blue");
}
bold()
{
  this.textNode.style.fontWeight='bold';
  
  
      var bb = this.textNode.getBBox();
      console.log(bb);
      
      var rect2=document.getElementById("selecttext");
      rect2.setAttribute('x',bb.x);
      rect2.setAttribute('y',bb.y);
      rect2.setAttribute('width',bb.width);
      rect2.setAttribute('height',bb.height);
      rect2.setAttribute('fill',"transparent");
      rect2.setAttribute('stroke',"blue");
}
Italic()
{
  this.textNode.style.fontStyle='Italic';
  
  
      var bb = this.textNode.getBBox();
      console.log(bb);
      
      var rect2=document.getElementById("selecttext");
      rect2.setAttribute('x',bb.x);
      rect2.setAttribute('y',bb.y);
      rect2.setAttribute('width',bb.width);
      rect2.setAttribute('height',bb.height);
      rect2.setAttribute('fill',"transparent");
      rect2.setAttribute('stroke',"blue");
}
color()
{
  
  


  this.textNode.setAttribute('fill',(<HTMLInputElement>document.getElementById("color2")).value);
  var bb = this.textNode.getBBox();
  console.log(bb);
  
  var rect2=document.getElementById("selecttext");
  rect2.setAttribute('x',bb.x);
  rect2.setAttribute('y',bb.y);
  rect2.setAttribute('width',bb.width);
  rect2.setAttribute('height',bb.height);
  rect2.setAttribute('fill',"transparent");
  rect2.setAttribute('stroke',"blue");
}
rotate()
{
  this.rotateText=true;
  
}
moveText()
{
  this.moveTExt=true;
}
zoomPlus()
{
this.scaledeg=this.scaledeg+0.1;
this.scale="scale("+""+this.scaledeg+""+")";
}
}
